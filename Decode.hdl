// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    And (a=in [15], b=true, out=write);
    And (a=in [15], b=in [12], out=a);
    And (a=in [15], b=in [11], out=x1);
    And (a=in [15], b=in [10], out=x2);
    And (a=in [15], b=in [9], out=x3) ;
    And (a=in [15], b=in [8], out=x4) ;
    And (a=in [15], b=in [7], out=x5) ;
    And (a=in [15], b=in [6], out=x6) ;
    Not (in=in [15], out=ni15);
    Or (a=ni15, b=in [5], out=ya1);
    And (a=in [15], b=in [5], out=yb1);
    Mux(a=ya1, b=yb1, sel=in [15], out=z1);
    And (a=in [15], b=in [4], out=z2);
    And (a=in [15], b=in [3], out=z3) ;
    And (a=in [15], b=in [2], out=jmp1);
    And (a=in [15], b=in [1], out=jmp2);
    And (a=in [15], b=in [0], out=jmp3);
}